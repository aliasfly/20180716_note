#include <QThread>   QThread类提供了一个与平台无关的管理线程的方法。
https://blog.csdn.net/t46414704152abc/article/details/52133377
一个QThread对象管理一个线程。QThread的执行从run()函数的执行开始，在Qt自带的QThread类中，run()函数通过调用exec()函数来启动事件循环机制，并且在线程内部处理Qt的事件。在Qt中建立线程的主要目的就是为了用线程来处理那些耗时的后台操作，从而让主界面能及时响应用户的请求操作。
QThread的使用方法有如下两种：
1.QObject::moveToThread()
2.继承QThread类

	QMutex类提供的是线程之间的访问顺序化。
	QMutex的目的是保护一个对象、数据结构或者代码段，所以同一时间只有一个线程可以访问它。
	emit //发射

方法一. QObject::moveToThread()方法
1.定义一个继承于QObject的worker类，在worker类中定义一个槽slot函数doWork()，这个函数中定义线程需要做的工作。 
2.在要使用线程的controller类中，新建一个QThread的对象和woker类对象，使用moveToThread()方法将worker对象的事件循环全部交由QThread对象处理。 
3.建立相关的信号函数和槽函数进行连接，然后发出信号触发QThread的槽函数，使其执行工作。
方法二. 继承QThread的方法
1.自定义一个继承QThread的类MyThread,重载MyThread中的run()函数，在run()函数中写入需要执行的工作. 
2.调用start()函数来启动线程
moveToThread的例子
       首先新建一个work类，该类重点在于其doWork槽函数，这个函数定义了线程需要做的工作，需要向其发送信号来触发。Wrok类的头文件中定义了全部函数，其cpp文件为空，因此就不贴出来了。
//work定义了线程要执行的工作
#ifndef WORKER_H
#define WORKER_H
#include <QObject>
#include<QDebug>
#include<QThread>
class Worker:public QObject
{
    Q_OBJECT
public:
    Worker(QObject* parent = nullptr){}
public slots:
        //doWork定义了线程要执行的操作
    void doWork(int parameter)
    {
        qDebug()<<"receive the execute signal---------------------------------";
        qDebug()<<"     current thread ID:"<<QThread::currentThreadId();
       //循环一百万次
       for(int i = 0;i!=1000000;++i)
       {
        ++parameter;
       }
       //发送结束信号
       qDebug()<<"      finish the work and sent the resultReady signal\n";
       emit resultReady(parameter);
    }

//线程完成工作时发送的信号
signals:
    void resultReady(const int result);
};

#endif // WORKER_H
	然后定义一个Controller类，这个类中定义了一个QThread对象，用于处理worker对象的事件循环工作
#ifndef CONTROLLER_H
#define CONTROLLER_H
#include <QObject>
#include<QThread>
#include<QDebug>
//controller用于启动线程和处理线程执行结果
class Controller : public QObject
{
    Q_OBJECT
    QThread workerThread;
public:
    Controller(QObject *parent= nullptr);
    ~Controller();

public slots:
    //处理线程执行的结果
    void handleResults(const int rslt)
    {
        qDebug()<<"receive the resultReady signal---------------------------------";
        qDebug()<<"     current thread ID:"<<QThread::currentThreadId()<<'\n';
        qDebug()<<"     the last result is:"<<rslt;
    }
signals:
    //发送信号触发线程
    void operate(const int);

};

#endif // CONTROLLER_H
	Controller类的cpp文件，其构造函数中创建worker对象，并且将其事件循环全部交给workerThread对象来处理，最后启动该线程，然后触发其事件处理函数。
#include "controller.h"
#include <worker.h>
Controller::Controller(QObject *parent) : QObject(parent)
{
    Worker *worker = new Worker;
    //调用moveToThread将该任务交给workThread
    worker->moveToThread(&workerThread);
    //operate信号发射后启动线程工作
    connect(this, SIGNAL(operate(const int)), worker, SLOT(doWork(int)));
    //该线程结束时销毁
    connect(&workerThread, &QThread::finished, worker, &QObject::deleteLater);
    //线程结束后发送信号，对结果进行处理
    connect(worker, SIGNAL(resultReady(int)), this, SLOT(handleResults(int)));
    //启动线程
    workerThread.start();
    //发射信号，开始执行
    qDebug()<<"emit the signal to execute!---------------------------------";
    qDebug()<<"     current thread ID:"<<QThread::currentThreadId()<<'\n';
    emit operate(0);
}
//析构函数中调用quit()函数结束线程
Controller::~Controller()
{
    workerThread.quit();
    workerThread.wait();
}
接下来就是主函数，主函数中我们新建一个Controller对象，开始执行：
#include <QCoreApplication>
#include "controller.h"
#include<QDebug>
#include<QThread>
int main(int argc, char *argv[])
{
    qDebug()<<"I am main Thread, my ID:"<<QThread::currentThreadId()<<"\n";
    QCoreApplication a(argc, argv);

    Controller c;
    return a.exec();
}



